module types/expressions

imports
  include/CSharp
  types/-
  runtime/types/-
  runtime/task/-
  
rules // literals
  
  // Literals
  type-of(|ctx): True()    -> <type-is(|ctx)> BoolTy()
  type-of(|ctx): False()   -> <type-is(|ctx)> BoolTy()
  type-of(|ctx): IntLit(_) -> <type-is(|ctx)> IntTy()
  type-of(|ctx): StrLit(_) -> <type-is(|ctx)> StringTy()
  
rules // binary operators
  
  type-of(|ctx):
    Add(e1, e2) -> <type-match(|ctx, BinCoerce())> [t1, t2]
    where
      t1 := <type-check(|ctx)> (e1, [IntTy(), StringTy()], INT_OR_STRING_MSG())
    ; t2 := <type-check(|ctx)> (e2, [IntTy(), StringTy()], INT_OR_STRING_MSG())

  type-of(|ctx):
    _ -> <type-is(|ctx, [t1, t2])> IntTy()
    where
      ?Sub(e1, e2)
    + ?Mul(e1, e2)
    + ?Div(e1, e2)
    where
      t1 := <type-check(|ctx)> (e1, IntTy(), INT_MSG())
    ; t2 := <type-check(|ctx)> (e2, IntTy(), INT_MSG())

  type-of(|ctx):
    _ -> <type-is(|ctx, [t1, t2])> BoolTy()
    where
      ?Lt(e1, e2)
    + ?Gt(e1, e2)
    + ?Lte(e1, e2)
    + ?Gte(e1, e2)
    where
      t1 := <type-check(|ctx)> (e1, [IntTy(), StringTy()], COMPARE_MSG())
    ; t2 := <type-check(|ctx)> (e2, [IntTy(), StringTy()], COMPARE_MSG())
    
type-of(|ctx):
    Eq(e1, e2) -> <type-is(|ctx, [tc])> BoolTy()
    where
      t1 := <type-check(|ctx)> (e1, [BoolTy(), IntTy(), StringTy()], EQ_MSG())
    ; t2 := <type-check(|ctx)> (e2, [BoolTy(), IntTy(), StringTy()], EQ_MSG())
    ; tc := <type-match(|ctx, BinCoerce())> [t1, t2]
    ; <task-create-error-on-failure(|ctx, tc, EQ_MSG())> e2

rules // names
        
  type-of(|ctx): VarRef(v)         -> <type-lookup(|ctx)> v
  type-of(|ctx): FieldAccess(e, f) -> <type-lookup(|ctx)> f
  type-of(|ctx): FunCall(e, m, _)  -> <type-lookup(|ctx)> m
  type-of(|ctx): FunCall(m, _)     -> <type-lookup(|ctx)> m
  type-of(|ctx): This()            -> <type-lookup(|ctx)> 
  type-of(|ctx): Super()           -> <type-lookup(|ctx)> 

  type-of(|ctx) = map(type-of(|ctx)); type-is(|ctx)
  