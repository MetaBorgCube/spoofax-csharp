module new-names

imports 
	
	include/CSharp
	nbl/-
	
signature 

  constructors // Namespaces
	
		Program   : Namespace
		Namespace : Namespace
		Class     : Namespace
	  Field     : Namespace 
	  Function  : Namespace
		Variable  : Namespace
	
	constructors // Properties
	  
	  Type           : Property
	  ParameterTypes : Property
	
rules // Type property
	
  type-of = fail
  
  calc-property(|elems): (Type(), x) -> <type-of> x
  calc-property(|elems): (ParameterTypes(), x) -> <map(?Param(<id>, _))> x
	
rules // Namespaces
  
  // Namespace(x, _)
  nbl-def-site(cpaths, spaths|lang, elems, tasks, paths) =
    ?Namespace(x, _);
    vdebug(!"enter ");
    Namespace(nbl-def(cpaths, spaths|lang, elems, tasks, paths, 
      Namespace(), <nbl-nonunique-qualifier>, [Current()], [Namespace(), Class()]), 
    id);
    vdebug(!"leave ")
	
	
	// UsingPart(x)
  nbl-use-site(|lang, elems, tasks, paths, deps) =
    ?UsingPart(x);
    vdebug(!"enter ");
    UsingPart(nbl-use(|lang, elems, tasks, paths, deps,
      Candidate(Namespace(), [], Current())
    ));
    vdebug(!"leave ")	
    
  nbl-import-site(deps'|lang, elems, tasks, paths, deps) =
    ?UsingPart(x);
    vdebug(!"enter ");
    UsingPart(nbl-import(deps'|lang, elems, tasks, paths, deps, 
      Namespace(), [
        Import(lang, Class())
      ])
    );
    vdebug(!"leave ")
    
	
	// TODO: UsingPart(u, x)
	
	
rules // Classes
	
	// Class(x, _)
	nbl-def-site(cpaths, spaths|lang, elems, tasks, paths) =
		?Class(x, _);
		vdebug(!"enter ");
		Class(nbl-def(cpaths, spaths|lang, elems, tasks, paths, 
		  Class(), <nbl-unique-qualifier>, [Current()], [Field(), Function()]), 
	  id);
		vdebug(!"leave ")
	
	nbl-prop-site(|lang, elems, tasks, paths) =
		?Class(x, _);
		vdebug(!"enter ");
		Class(nbl-props(|lang, elems, tasks, [
			Prop(Type(), Type(x))
		]), id);
		vdebug(!"leave ")
		
		
	// Class(x, y, _)
  nbl-def-site(cpaths, spaths|lang, elems, tasks, paths) =
    ?Class(x, y, _);
    vdebug(!"enter ");
    Class(nbl-def(cpaths, spaths|lang, elems, tasks, paths, 
      Class(), <nbl-unique-qualifier>, [Current()], [Field(), Function()]), 
    id, id);
    vdebug(!"leave ")
  
  nbl-prop-site(|lang, elems, tasks, paths) =
    ?Class(x, y, _);
    vdebug(!"enter ");
    Class(nbl-props(|lang, elems, tasks, [
    	Prop(Type(), Type(x))
  	]), id, id);
    vdebug(!"leave ")
    
  nbl-use-site(|lang, elems, tasks, paths, deps) =
    ?Class(x, y, _);
    vdebug(!"enter ");
    Class(id, nbl-use(|lang, elems, tasks, paths, deps,
      Candidate(Class(), [], Current())), 
    id);
    vdebug(!"leave ")
    
  nbl-import-site(deps'|lang, elems, tasks, paths, deps) =
    ?Class(x, y, _);
    vdebug(!"enter ");
    Class(id, nbl-import(deps'|lang, elems, tasks, paths, deps, 
      Class(), [
	    	Import(lang, Field()), 
	      Import(lang, Imported(Field())), 
	      Import(lang, Function()), 
	      Import(lang, Imported(Function()))
      ]
    ), id);
    vdebug(!"leave ")
  
  // PartialClass(x, _)
  nbl-def-site(cpaths, spaths|lang, elems, tasks, paths) =
    ?PartialClass(x, _);
    vdebug(!"enter ");
    PartialClass(nbl-def(cpaths, spaths|lang, elems, tasks, paths, 
      Class(), <nbl-nonunique-qualifier>, [Current()], [Field(), Function()]),
    id);
    vdebug(!"leave ")
  
  nbl-prop-site(|lang, elems, tasks, paths) =
    ?PartialClass(x, _);
    vdebug(!"enter ");
    PartialClass(nbl-props(|lang, elems, tasks, [
    	Prop(Type(), Type(x))
  	]), id);
    vdebug(!"leave ")
    
    
  // PartialClass(x, y, _)
  nbl-def-site(cpaths, spaths|lang, elems, tasks, paths) =
    ?PartialClass(x, y, _);
    vdebug(!"enter ");
    PartialClass(nbl-def(cpaths, spaths|lang, elems, tasks, paths, 
      Class(), <nbl-nonunique-qualifier>, [Current()], [Field(), Function()]), 
    id, id);
    vdebug(!"leave ")
  
  nbl-prop-site(|lang, elems, tasks, paths) =
    ?PartialClass(x, y, _);
    vdebug(!"enter ");
    PartialClass(nbl-props(|lang, elems, tasks, [
    	Prop(Type(), Type(x))]), 
  	id, id);
    vdebug(!"leave ")
    	
  nbl-use-site(|lang, elems, tasks, paths, deps) =
    ?PartialClass(x, y, _);
    vdebug(!"enter ");
    PartialClass(id, nbl-use(|lang, elems, tasks, paths, deps,
      Candidate(Class(), [], Current())), 
    id);
    vdebug(!"leave ")
  
  nbl-import-site(deps'|lang, elems, tasks, paths, deps) =
    ?PartialClass(x, y, _);
    vdebug(!"enter ");
    PartialClass(id, nbl-import(deps'|lang, elems, tasks, paths, deps, 
      Class(), [
	      Import(lang, Field()), 
	      Import(lang, Imported(Field())), 
	      Import(lang, Function()), 
	      Import(lang, Imported(Function()))
      ]
    ), id);
    vdebug(!"leave ")
    	
	// Type(c)
	nbl-use-site(|lang, elems, tasks, paths, deps) =
		?Type(c);
		vdebug(!"enter ");
		Type(nbl-use(|lang, elems, tasks, paths, deps,
		  Candidate(Class(), [], Current())
	  ));
		vdebug(!"leave ")
		
rules // Fields
	
	nbl-def-site(cpaths, spaths|lang, elems, tasks, paths) =
		?FieldDef(t, x);
		vdebug(!"enter ");
		FieldDef(id, nbl-def(cpaths, spaths|lang, elems, tasks, paths, 
		  Field(), <nbl-unique-qualifier>, [Current()], []
	  ));
		vdebug(!"leave ")
		
  nbl-prop-site(|lang, elems, tasks, paths) =
    ?FieldDef(t, x);
    vdebug(!"enter ");
    FieldDef(id, nbl-props(|lang, elems, tasks, [
      Prop(Type(), t)
    ]));
    vdebug(!"leave ")
    
  // FieldAccess(exp, f)
  nbl-use-site(|lang, elems, tasks, paths, deps) =
    ?FieldAccess(e, f);
    vdebug(!"enter ");
    where (result1 := <new-task(|tasks)> PropCalc(Type(), e));
    where (result2 := <new-task(|tasks, [<nbl-result-number> result1])> Match("nbl-use-site_match_FieldAccess_2", result1));
    FieldAccess(id, nbl-use(|lang, elems, tasks, paths, deps,
      Candidate(Field(), [], result2)
    ));
    vdebug(!"leave ")
    
  match-term: 
    ("nbl-use-site_match_FieldAccess_2", Type(_{anno*})) -> uri
    where
      Def(uri) := <collect-one(?Def(_))> anno*
      
rules // Functions
  
  // FunDef(t, x, _)
  // TODO: store parameter types
  nbl-def-site(cpaths, spaths|lang, elems, tasks, paths) =
    ?FunDef(t, x, _);
    vdebug(!"enter ");
    FunDef(id, nbl-def(cpaths, spaths|lang, elems, tasks, paths, 
      Function(), <nbl-unique-qualifier>, [Current()], []), 
    id);
    vdebug(!"leave ")
    
  nbl-prop-site(|lang, elems, tasks, paths) =
    ?FunDef(t, x, p);
    vdebug(!"enter ");
    where (result := <new-task(|tasks)> PropCalc(ParameterTypes(), p));
    FunDef(id, nbl-props(|lang, elems, tasks, [
    	Prop(Type(), t)
    , Prop(ParameterTypes(), result)
  	]), id);
    vdebug(!"leave ")
    
  
  // FunDef(t, x, _, _)
  // TODO: store parameter types
  nbl-def-site(cpaths, spaths|lang, elems, tasks, paths) =
    ?FunDef(t, x, _, _);
    vdebug(!"enter ");
    FunDef(id, nbl-def(cpaths, spaths|lang, elems, tasks, paths, 
      Function(), <nbl-unique-qualifier>, [Current()], [Variable()]), 
    id, id);
    vdebug(!"leave ")
    
  nbl-prop-site(|lang, elems, tasks, paths) =
    ?FunDef(t, x, p, _);
    vdebug(!"enter ");
    where (result := <new-task(|tasks)> PropCalc(ParameterTypes(), p));
    FunDef(id, nbl-props(|lang, elems, tasks, [
    	Prop(Type(), t)
    , Prop(ParameterTypes(), result)
  	]), id, id);
    vdebug(!"leave ")
    
  
  // FunCall(exp, f, _)
  // TODO: match argument types against parameter types
  nbl-use-site(|lang, elems, tasks, paths, deps) =
    ?FunCall(e, x, _);
    vdebug(!"enter ");
    where (result1 := <new-task(|tasks)> PropCalc(Type(), e));
    where (result2 := <new-task(|tasks, [<nbl-result-number> result1])> Match("nbl-use-site_match_FunCall_3", result1));
    FunCall(id, nbl-use(|lang, elems, tasks, paths, deps,
      Candidate(Function(), [], result2)), 
    id);
    vdebug(!"leave ")
    
  match-term: 
  	("nbl-use-site_match_FunCall_3", Type(_{anno*})) -> uri
    where
    	Def(uri) := <collect-one(?Def(_))> anno*
  
  // FunCall(x, _)
  // TODO: match argument types against parameter types
  nbl-use-site(|lang, elems, tasks, paths, deps) =
    ?FunCall(x, _);
    vdebug(!"enter ");
    FunCall(nbl-use(|lang, elems, tasks, paths, deps,
      Candidate(Function(), [], Current())), 
    id);
    vdebug(!"leave ")

  
  // Param(t, x)
  nbl-def-site(cpaths, spaths|lang, elems, tasks, paths) =
    ?Param(t, x);
    vdebug(!"enter ");
    Param(id, nbl-def(cpaths, spaths|lang, elems, tasks, paths, 
      Variable(), <nbl-unique-qualifier>, [Current()], []
    ));
    vdebug(!"leave ")
    
  nbl-prop-site(|lang, elems, tasks, paths) =
    ?Param(t, x);
    vdebug(!"enter ");
    Param(id, nbl-props(|lang, elems, tasks, [
    	Prop(Type(), t)
  	]));
    vdebug(!"leave ")
  
rules // Variable
  
  // VarDef(t, x, _)
  nbl-def-site(cpaths, spaths|lang, elems, tasks, paths) =
    ?VarDef(t, x, _);
    vdebug(!"enter ");
    VarDef(id, nbl-def(cpaths, spaths|lang, elems, tasks, paths, 
      Variable(), <nbl-unique-qualifier>, [Subsequent()], []), 
    id);
    vdebug(!"leave ")
    
  nbl-prop-site(|lang, elems, tasks, paths) =
    ?VarDef(t, x, _);
    vdebug(!"enter ");
    VarDef(id, nbl-props(|lang, elems, tasks, [
    	Prop(Type(), t)
  	]), id);
    vdebug(!"leave ")
    
  
  // VarDef(t, x)
  nbl-def-site(cpaths, spaths|lang, elems, tasks, paths) =
    ?VarDef(t, x);
    vdebug(!"enter ");
    VarDef(id, nbl-def(cpaths, spaths|lang, elems, tasks, paths, 
      Variable(), <nbl-unique-qualifier>, [Subsequent()], []
    ));
    vdebug(!"leave ")
    
  nbl-prop-site(|lang, elems, tasks, paths) =
    ?VarDef(t, x);
    vdebug(!"enter ");
    VarDef(id, nbl-props(|lang, elems, tasks, [
    	Prop(Type(), t)
  	]));
    vdebug(!"leave ")
    
  
  // VarRef(x)
  nbl-use-site(|lang, elems, tasks, paths, deps) =
    ?VarRef(x);
    vdebug(!"enter ");
    VarRef(nbl-use(|lang, elems, tasks, paths, deps, [
    	Candidate(Variable(), [], Current()), 
    	Candidate(Field(), [], Current())
  	]));
    vdebug(!"leave ")
  
  
  // Assign(x, _)
  nbl-use-site(|lang, elems, tasks, paths, deps) =
    ?Assign(x, _);
    vdebug(!"enter ");
    Assign(nbl-use(|lang, elems, tasks, paths, deps, [
    	Candidate(Variable(), [], Current()), 
    	Candidate(Field(), [], Current())
  	]), id);
    vdebug(!"leave ")

rules // Control flow
  
  // For(t, x, init, cond, stmt, body) 
  nbl-def-site(cpaths, spaths|lang, elems, tasks, paths) =    
    ?For(t, x, init, cond, stmt, body);
    vdebug(!"enter ");
    where(scope := <nbl-def-scope> Variable());
    For(id, nbl-def(cpaths, spaths|lang, elems, tasks, paths, 
      Variable(), <nbl-unique-qualifier>, [scope], []), id, nbl-def-scope(|scope), 
      nbl-def-scope(|scope), nbl-def-scope(|scope)
    );
    vdebug(!"leave ")
    
  nbl-prop-site(cpaths, spaths|lang, elems, tasks, paths) =   
    ?For(t, x, init, cond, stmt, body);
    vdebug(!"enter ");
    For(id, nbl-props(|lang, elems, tasks, [
    	Prop(Type(), t)
  	]), id, id, id, id);
    vdebug(!"leave ")
  
  
  // ForEach(t, x, e, body)
  nbl-def-site(cpaths, spaths|lang, elems, tasks, paths) =    
    ?ForEach(t, x, e, body);
    vdebug(!"enter ");
    where(scope := <nbl-def-scope> Variable());
    ForEach(id, nbl-def(cpaths, spaths|lang, elems, tasks, paths, 
      Variable(), <nbl-unique-qualifier>, [scope], []), id, nbl-def-scope(|scope)
    );
    vdebug(!"leave ")
    
  nbl-prop-site(cpaths, spaths|lang, elems, tasks, paths) =   
    ?ForEach(t, x, e, body);
    vdebug(!"enter ");
    ForEach(id, nbl-props(|lang, elems, tasks, [
      Prop(Type(), t)
    ]), id, id);
    vdebug(!"leave ")
  
  
  // Block(stmt*)
  nbl-scope-site(cpaths|lang, paths) =   
    ?Block(stmt*);
    vdebug(!"enter ");
    Block(nbl-anonymous-scope(cpaths|lang, paths, [
      Variable()
    ]));
    vdebug(!"leave ")
    
rules // Scoping projections

  nbl-scopes = ?(Program(), Namespace())
  nbl-scopes = ?(Program(), Class())
  
  nbl-scopes = ?(Namespace(), Namespace())
  nbl-scopes = ?(Namespace(), Class())
  
  nbl-scopes = ?(Class(), Field())
  nbl-scopes = ?(Class(), Function())

  nbl-scopes = ?(Function(), Variable())
  