module new-names

imports 
	
	include/CSharp
	lib/task/core
	lib/nbl/-
	types
	
signature 

  constructors // Namespaces
	
		Program   : Namespace
		Namespace : Namespace
		Class     : Namespace
	  Field     : Namespace 
	  Function  : Namespace
		Variable  : Namespace
	
	constructors // Properties
	  
	  Type           : Property
	  ParameterTypes : Property
	
rules // Type property
	
  calc-property: 
  	(Type(), x) -> <type-of> x
	
rules // Namespaces
  
  // Namespace(x, _)
  nabl-def-site(cpaths, spaths|context, paths, states) =
    ?Namespace(x, _);
    Namespace(nabl-def(cpaths, spaths|context, paths, 
      Namespace(), NonUnique(), Current(), [Namespace(), Class()]), 
    id)
	
	
	// Using(x)
  nabl-import-site(|context, paths, states) =
    ?Using(x);
    Using(nabl-import(|context, paths, [
      Import(<lang-in-context> context, Class())
    ]))
	
  nabl-import-dependency-site = 
    ?Using(x);
    Using(nabl-import-dependency)


	// UsingPart(x)
  nabl-use-site(|context, paths, deps, states) =
    ?UsingPart(x);
    UsingPart(nabl-use(|context, paths, deps,
      UseCandidate(Namespace(), [], Current(), All())
    ))	
    

	// UsingPart(u, x)
  nabl-use-site(|context, paths, deps, states) =
    ?UsingPart(u, x);
    where (target-uri* := <nabl-collect-all-use; map(nabl-uri)> u);
    UsingPart(id, nabl-use(|context, paths, deps,
      UseCandidate(Namespace(), [], target-uri*, One())
    ))
	
rules // Classes
	
	// Class(x, _)
	nabl-def-site(cpaths, spaths|context, paths, states) =
		?Class(x, _);
		Class(nabl-def(cpaths, spaths|context, paths, 
		  Class(), Unique(), Current(), [Field(), Function()]), 
	  id)

	nabl-prop-site(|context, states) =
		?Class(x, _);
		Class(nabl-props(|context, [
			Prop(Type(), Type(x))
		]), id)
		
  nabl-implicit-def-site(|context, paths, states) =
    ?Class(x, _);
    Class(nabl-implicit-def(|context, paths, [
      IDefCandidate(Field(), "this", Unique(), [Prop(Type(), Type(x))])
    ]), id)
    
		
	// Class(x, y, _)
  nabl-def-site(cpaths, spaths|context, paths, states) =
    ?Class(x, y, _);
    Class(nabl-def(cpaths, spaths|context, paths, 
      Class(), Unique(), Current(), [Field(), Function()]), 
    id, id)
  
  nabl-prop-site(|context, states) =
    ?Class(x, y, _);
    Class(nabl-props(|context, [
    	Prop(Type(), Type(x))
  	]), id, id)
    
  nabl-use-site(|context, paths, deps, states) =
    ?Class(x, y, _);
    Class(id, nabl-use(|context, paths, deps,
      UseCandidate(Class(), [], Current(), All())), 
    id)
    
  nabl-import-site(|context, paths, states) =
    ?Class(x, y, _);
    Class(id, nabl-import(|context, paths, [
    	Import(<lang-in-context> context, Field()), 
      Import(<lang-in-context> context, Imported(Field())), 
      Import(<lang-in-context> context, Function()), 
      Import(<lang-in-context> context, Imported(Function()))
    ]), id)
    
  nabl-import-dependency-site = 
    ?Class(x, y, _);
    Class(id, nabl-import-dependency, id)
    
  nabl-implicit-def-site(|context, paths, states) =
    ?Class(x, y, _);
    Class(nabl-implicit-def(|context, paths, [
      IDefCandidate(Field(), "this", Unique(), [Prop(Type(), Type(x))])
    ]), nabl-implicit-def(|context, paths, [
      IDefCandidate(Field(), "super", Unique(), [Prop(Type(), Type(y))])
    ]), id)

  
  // PartialClass(x, _)
  nabl-def-site(cpaths, spaths|context, paths, states) =
    ?PartialClass(x, _);
    PartialClass(nabl-def(cpaths, spaths|context, paths, 
      Class(), NonUnique(), Current(), [Field(), Function()]),
    id)
  
  nabl-prop-site(|context, states) =
    ?PartialClass(x, _);
    PartialClass(nabl-props(|context, [
    	Prop(Type(), Type(x))
  	]), id)
    
  nabl-implicit-def-site(|context, paths, states) =
    ?PartialClass(x, _);
    Class(nabl-implicit-def(|context, paths, [
      IDefCandidate(Field(), "this", Unique(), [Prop(Type(), Type(x))])
    ]), id)
    
    
  // PartialClass(x, y, _)
  nabl-def-site(cpaths, spaths|context, paths, states) =
    ?PartialClass(x, y, _);
    PartialClass(nabl-def(cpaths, spaths|context, paths, 
      Class(), NonUnique(), Current(), [Field(), Function()]), 
    id, id)
  
  nabl-prop-site(|context, states) =
    ?PartialClass(x, y, _);
    PartialClass(nabl-props(|context, [
    	Prop(Type(), Type(x))]), 
  	id, id)
    	
  nabl-use-site(|context, paths, deps, states) =
    ?PartialClass(x, y, _);
    PartialClass(id, nabl-use(|context, paths, deps,
      UseCandidate(Class(), [], Current(), All())), 
    id)
  
  nabl-import-site(|context, paths, states) =
    ?PartialClass(x, y, _);
    PartialClass(id, nabl-import(|context, paths, [
      Import(<lang-in-context> context, Field()), 
      Import(<lang-in-context> context, Imported(Field())), 
      Import(<lang-in-context> context, Function()), 
      Import(<lang-in-context> context, Imported(Function()))
    ]), id)
    
  nabl-implicit-def-site(|context, paths, states) =
    ?PartialClass(x, y, _);
    Class(nabl-implicit-def(|context, paths, [
      IDefCandidate(Field(), "this", Unique(), [Prop(Type(), Type(x))])
    ]), nabl-implicit-def(|context, paths, [
      IDefCandidate(Field(), "super", Unique(), [Prop(Type(), Type(y))])
    ]), id)

  nabl-import-dependency-site = 
    ?PartialClass(x, y, _);
    PartialClass(id, nabl-import-dependency, id)


  // TypePart(x)
  nabl-use-site(|context, paths, deps, states) =
    ?TypePart(x);
    TypePart(nabl-use(|context, paths, deps, [
      UseCandidate(Namespace(), [], Current(), All())
    , UseCandidate(Class(), [], Current(), All())
    ])) 
    

  // TypePart(q, x)
  nabl-use-site(|context, paths, deps, states) =
    ?TypePart(q, x);
    where (target-uri* := <nabl-collect-all-use; map(nabl-uri)> q);
    TypePart(id, nabl-use(|context, paths, deps, [
      UseCandidate(Namespace(), [], target-uri*, One())
    , UseCandidate(Class(), [], target-uri*, One())
    ]))
		
		
  // This()
  nabl-use-site(|context, paths, deps, states) =
    ?This();
    where (result1 := <new-task(|<task-in-context> context)> Resolve(<lookup-uri(|<lang-in-context> context, Field())> paths, Field(), "this", [], All()));
    where (result2 := <new-task(|<task-in-context> context)> PropCalc(Type(), result1));
    where (result3 := <new-task(|<task-in-context> context)> Match("nabl-use-site_match_This_0", [], result2));
    nabl-use(|context, paths, deps,
      UseCandidate(Class(), result3, [], Current(), One())
    )

  nabl-match:
  	// The name is required here instead of the URI, because we are looking up a name that is produced by a type lookup.
    ("nabl-use-site_match_This_0", types, []) -> <nabl-uri-name> uri
    where
    	// A resolve task returns a list of URI's (result1), so when the type is calculated (result2) a list of types is
    	// returned as well. So the first type in the list is taken.
    	<fetch-elem(?Type(_{anno*}))> types;
      Def(uri) := <collect-one(?Def(_))> anno*
      
      
  // Super()
  nabl-use-site(|context, paths, deps, states) =
    ?Super();
    where (result1 := <new-task(|<task-in-context> context)> Resolve(<lookup-uri(|<lang-in-context> context, Field())> paths, Field(), "super", [], All()));
    where (result2 := <new-task(|<task-in-context> context)> PropCalc(Type(), result1));
    where (result3 := <new-task(|<task-in-context> context)> Match("nabl-use-site_match_Super_0", [], result2));
    nabl-use(|context, paths, deps,
      UseCandidate(Class(), result3, [], Current(), One())
    )

  nabl-match:
    ("nabl-use-site_match_Super_0", types, []) -> <nabl-uri-name> uri
    where
      <fetch-elem(?Type(_{anno*}))> types;
      Def(uri) := <collect-one(?Def(_))> anno*
		
rules // Fields
	
	// FieldDef(t, x)
	nabl-def-site(cpaths, spaths|context, paths, states) =
		?FieldDef(t, x);
		FieldDef(id, nabl-def(cpaths, spaths|context, paths, 
		  Field(), Unique(), Current(), []
	  ))
		
  nabl-prop-site(|context, states) =
    ?FieldDef(t, x);
    FieldDef(id, nabl-props(|context, [
      Prop(Type(), t)
    ]))

    
  // FieldAccess(e, f)
  nabl-use-site(|context, paths, deps, states) =
    ?FieldAccess(e, f);
    where (result1 := <new-task(|<task-in-context> context)> PropCalc(Type(), e));
    where (result2 := <new-task(|<task-in-context> context)> Match("nabl-use-site_match_FieldAccess_2", [], result1));
    FieldAccess(id, nabl-use(|context, paths, deps,
      UseCandidate(Field(), [], result2, One())
    ))
    
  nabl-match: 
    ("nabl-use-site_match_FieldAccess_2", Type(_{anno*}), []) -> uri
    where
      Def(uri) := <collect-one(?Def(_))> anno*
      
rules // Functions
  
  // FunDef(t, x, _)
  nabl-def-site(cpaths, spaths|context, paths, states) =
    ?FunDef(t, x, _);
    FunDef(id, nabl-def(cpaths, spaths|context, paths, 
      Function(), Unique(), Current(), []), 
    id)
    
  nabl-prop-site(|context, states) =
    ?FunDef(t, x, p);
    where (result := <new-task(|<task-in-context> context)> PropCalc(Type(), p));
    FunDef(id, nabl-props(|context, [
    	Prop(Type(), t)
    , Prop(ParameterTypes(), result)
  	]), id)
    
  
  // FunDef(t, x, _, _)
  nabl-def-site(cpaths, spaths|context, paths, states) =
    ?FunDef(t, x, _, _);
    FunDef(id, nabl-def(cpaths, spaths|context, paths, 
      Function(), Unique(), Current(), [Variable()]), 
    id, id)
    
  nabl-prop-site(|context, states) =
    ?FunDef(t, x, p, _);
    where (result := <new-task(|<task-in-context> context)> PropCalc(Type(), p));
    FunDef(id, nabl-props(|context, [
    	Prop(Type(), t)
    , Prop(ParameterTypes(), result)
  	]), id, id)
    
  
  // FunCall(e, f, a)
  nabl-use-site(|context, paths, deps, states) =
    ?FunCall(e, x, a);
    where (result1 := <new-task(|<task-in-context> context)> PropCalc(Type(), e));
    where (result2 := <new-task(|<task-in-context> context)> Match("nabl-use-site_match_FunCall_3", [], result1));
    where (result3 := <new-task(|<task-in-context> context)> PropCalc(Type(), a));
    FunCall(id, nabl-use(|context, paths, deps,
      UseCandidate(Function(), [Prop(ParameterTypes(), result3)], result2, One())), 
    id)
    
  nabl-match: 
  	("nabl-use-site_match_FunCall_3", Type(_{anno*}), []) -> uri
    where
    	Def(uri) := <collect-one(?Def(_))> anno*
  
  
  // FunCall(x, a)
  nabl-use-site(|context, paths, deps, states) =
    ?FunCall(x, a);
    where (result := <new-task(|<task-in-context> context)> PropCalc(Type(), a));
    FunCall(nabl-use(|context, paths, deps,
      UseCandidate(Function(), [Prop(ParameterTypes(), result)], Current(), All())), 
    id)

  
  // Param(t, x)
  nabl-def-site(cpaths, spaths|context, paths, states) =
    ?Param(t, x);
    Param(id, nabl-def(cpaths, spaths|context, paths, 
      Variable(), Unique(), Current(), []
    ))
    
  nabl-prop-site(|context, states) =
    ?Param(t, x);
    Param(id, nabl-props(|context, [
    	Prop(Type(), t)
  	]))
  
rules // Variable
  
  // VarDef(t, x, _)
  nabl-def-site(cpaths, spaths|context, paths, states) =
    ?VarDef(t, x, _);
    VarDef(id, nabl-def(cpaths, spaths|context, paths, 
      Variable(), Unique(), [Subsequent()], []), 
    id)
    
  nabl-prop-site(|context, states) =
    ?VarDef(t, x, _);
    VarDef(id, nabl-props(|context, [
    	Prop(Type(), t)
  	]), id)
    
  
  // VarDef(t, x)
  nabl-def-site(cpaths, spaths|context, paths, states) =
    ?VarDef(t, x);
    VarDef(id, nabl-def(cpaths, spaths|context, paths, 
      Variable(), Unique(), [Subsequent()], []
    ))
    
  nabl-prop-site(|context, states) =
    ?VarDef(t, x);
    VarDef(id, nabl-props(|context, [
    	Prop(Type(), t)
  	]))
    
    
  // InferredVarDef(x, e)
  nabl-def-site(cpaths, spaths|context, paths, states) =
    ?InferredVarDef(x, e);
    InferredVarDef(nabl-def(cpaths, spaths|context, paths, 
      Variable(), Unique(), [Subsequent()], []
    ), id)
    
  nabl-prop-site(|context, states) =
    ?InferredVarDef(x, e);
    where (result := <new-task(|<task-in-context> context)> PropCalc(Type(), e));
    InferredVarDef(nabl-props(|context, [
      Prop(Type(), result)
    ]), id)
    
  // VarRef(x)
  nabl-use-site(|context, paths, deps, states) =
    ?VarRef(x);
    VarRef(nabl-use(|context, paths, deps, [
    	UseCandidate(Variable(), [], Current(), All()), 
    	UseCandidate(Field(), [], Current(), All())
  	]))

rules // Control flow
  
  // For(t, x, init, cond, stmt, body) 
  nabl-def-site(cpaths, spaths|context, paths, states) =    
    ?For(t, x, init, cond, stmt, body);
    where(scope := <nabl-construct-def-scope(|context)> Variable());
    For(id, nabl-def(cpaths, spaths|context, paths, 
      Variable(), Unique(), [scope], []), id, nabl-def-scope(|scope), 
      nabl-def-scope(|scope), nabl-def-scope(|scope)
    )
    
  nabl-prop-site(cpaths, spaths|context, states) =   
    ?For(t, x, init, cond, stmt, body);
    For(id, nabl-props(|context, [
    	Prop(Type(), t)
  	]), id, id, id, id)
  
  
  // ForEach(t, x, e, body)
  nabl-def-site(cpaths, spaths|context, paths, states) =    
    ?ForEach(t, x, e, body);
    where(scope := <nabl-construct-def-scope(|context)> Variable());
    ForEach(id, nabl-def(cpaths, spaths|context, paths, 
      Variable(), Unique(), [scope], []), id, nabl-def-scope(|scope)
    )
    
  nabl-prop-site(cpaths, spaths|context, states) =   
    ?ForEach(t, x, e, body);
    ForEach(id, nabl-props(|context, [
      Prop(Type(), t)
    ]), id, id)
  
  
  // Block(stmt*)
  nabl-anonymous-scope-site(cpaths|context, paths, states) =   
    ?Block(stmt*);
    nabl-anonymous-scope(cpaths|context, paths, [
      Variable()
    ])

rules // Name projections
  
  nabl-name:
    UsingPart(q, x) -> x

  nabl-name-apply(s):
    UsingPart(q, x) -> UsingPart(q, <s> x)
    
  nabl-name:
    UsingPart(x) -> x
    
  nabl-name-apply(s):
    UsingPart(x) -> UsingPart(<s> x)
    
  nabl-name:
    TypePart(q, x) -> x

  nabl-name-apply(s):
    TypePart(q, x) -> TypePart(q, <s> x)
    
  nabl-name:
    TypePart(x) -> x
    
  nabl-name-apply(s):
    TypePart(x) -> TypePart(<s> x)
    
rules // Scoping projections

  nabl-scopes = ?(Program(), Namespace())
  nabl-scopes = ?(Program(), Class())
  
  nabl-scopes = ?(Namespace(), Namespace())
  nabl-scopes = ?(Namespace(), Class())
  
  nabl-scopes = ?(Class(), Field())
  nabl-scopes = ?(Class(), Function())

  nabl-scopes = ?(Function(), Variable())
  