module new-names

imports 
	
	include/CSharp
	lib/task/core
	lib/nbl/-
	types
	old-names
	
signature 

  constructors // Namespaces
	
		Program   : Namespace
		Namespace : Namespace
		Class     : Namespace
	  Field     : Namespace 
	  Function  : Namespace
		Variable  : Namespace
	
	constructors // Properties
	  
	  Type           : Property
	  ParameterTypes : Property
	
rules // Type property
	
  calc-property: 
  	(Type(), x) -> <type-of> x
	
rules // Namespaces
	
	// Using(x)
  nabl-import-site(|lang, elems, tasks, paths, states) =
    ?Using(x);
    Using(nabl-import(|lang, elems, tasks, paths, [
      Import(lang, Class())
    ]))
	
  nabl-import-dependency-site = 
    ?Using(x);
    Using(nabl-import-dependency)


	// UsingPart(x)
  nabl-use-site(|lang, elems, tasks, paths, deps, states) =
    ?UsingPart(x);
    UsingPart(nabl-use(|lang, elems, tasks, paths, deps,
      UseCandidate(Namespace(), [], Current(), All())
    ))	
    

	// UsingPart(u, x)
  nabl-use-site(|lang, elems, tasks, paths, deps, states) =
    ?UsingPart(u, x);
    where (target-uri* := <nabl-collect-all-use; map(nabl-uri)> u);
    UsingPart(id, nabl-use(|lang, elems, tasks, paths, deps,
      UseCandidate(Namespace(), [], target-uri*, One())
    ))
	
rules // Classes
	
	// Class(x, _)
  nabl-implicit-def-site(|lang, elems, tasks, paths, states) =
    ?Class(x, _);
    Class(nabl-implicit-def(|lang, elems, tasks, paths, [
      IDefCandidate(Field(), "this", <nabl-unique-qualifier>, [Prop(Type(), Type(x))])
    ]), id)
    
		
	// Class(x, y, _)
  nabl-use-site(|lang, elems, tasks, paths, deps, states) =
    ?Class(x, y, _);
    Class(id, nabl-use(|lang, elems, tasks, paths, deps,
      UseCandidate(Class(), [], Current(), All())), 
    id)
    
  nabl-import-site(|lang, elems, tasks, paths, states) =
    ?Class(x, y, _);
    Class(id, nabl-import(|lang, elems, tasks, paths, [
    	Import(lang, Field()), 
      Import(lang, Imported(Field())), 
      Import(lang, Function()), 
      Import(lang, Imported(Function()))
    ]), id)
    
  nabl-import-dependency-site = 
    ?Class(x, y, _);
    Class(id, nabl-import-dependency, id)
    
  nabl-implicit-def-site(|lang, elems, tasks, paths, states) =
    ?Class(x, y, _);
    Class(nabl-implicit-def(|lang, elems, tasks, paths, [
      IDefCandidate(Field(), "this", <nabl-unique-qualifier>, [Prop(Type(), Type(x))])
    ]), nabl-implicit-def(|lang, elems, tasks, paths, [
      IDefCandidate(Field(), "super", <nabl-unique-qualifier>, [Prop(Type(), Type(y))])
    ]), id)

  
  nabl-implicit-def-site(|lang, elems, tasks, paths, states) =
    ?PartialClass(x, _);
    Class(nabl-implicit-def(|lang, elems, tasks, paths, [
      IDefCandidate(Field(), "this", <nabl-unique-qualifier>, [Prop(Type(), Type(x))])
    ]), id)
    
    
  nabl-use-site(|lang, elems, tasks, paths, deps, states) =
    ?PartialClass(x, y, _);
    PartialClass(id, nabl-use(|lang, elems, tasks, paths, deps,
      UseCandidate(Class(), [], Current(), All())), 
    id)
  
  nabl-import-site(|lang, elems, tasks, paths, states) =
    ?PartialClass(x, y, _);
    PartialClass(id, nabl-import(|lang, elems, tasks, paths, [
      Import(lang, Field()), 
      Import(lang, Imported(Field())), 
      Import(lang, Function()), 
      Import(lang, Imported(Function()))
    ]), id)
    
  nabl-implicit-def-site(|lang, elems, tasks, paths, states) =
    ?PartialClass(x, y, _);
    Class(nabl-implicit-def(|lang, elems, tasks, paths, [
      IDefCandidate(Field(), "this", <nabl-unique-qualifier>, [Prop(Type(), Type(x))])
    ]), nabl-implicit-def(|lang, elems, tasks, paths, [
      IDefCandidate(Field(), "super", <nabl-unique-qualifier>, [Prop(Type(), Type(y))])
    ]), id)

  nabl-import-dependency-site = 
    ?PartialClass(x, y, _);
    PartialClass(id, nabl-import-dependency, id)


  // TypePart(x)
  nabl-use-site(|lang, elems, tasks, paths, deps, states) =
    ?TypePart(x);
    TypePart(nabl-use(|lang, elems, tasks, paths, deps, [
      UseCandidate(Namespace(), [], Current(), All())
    , UseCandidate(Class(), [], Current(), All())
    ])) 
    

  // TypePart(q, x)
  nabl-use-site(|lang, elems, tasks, paths, deps, states) =
    ?TypePart(q, x);
    where (target-uri* := <nabl-collect-all-use; map(nabl-uri)> q);
    TypePart(id, nabl-use(|lang, elems, tasks, paths, deps, [
      UseCandidate(Namespace(), [], target-uri*, One())
    , UseCandidate(Class(), [], target-uri*, One())
    ]))
		
		
  // This()
  nabl-use-site(|lang, elems, tasks, paths, deps, states) =
    ?This();
    where (result1 := <new-task(|tasks)> Resolve(<lookup-uri(|lang, Field())> paths, Field(), "this", [], All()));
    where (result2 := <new-task(|tasks)> PropCalc(Type(), result1));
    where (result3 := <new-task(|tasks)> Match("nabl-use-site_match_This_0", result2));
    nabl-use(|lang, elems, tasks, paths, deps,
      UseCandidate(Class(), result3, [], Current(), One())
    )

  match-term:
  	// The name is required here instead of the URI, because we are looking up a name that is produced by a type lookup.
    ("nabl-use-site_match_This_0", types) -> <nabl-uri-name> uri
    where
    	// A resolve task returns a list of URI's (result1), so when the type is calculated (result2) a list of types is
    	// returned as well. So the first type in the list is taken.
    	<fetch-elem(?Type(_{anno*}))> types;
      Def(uri) := <collect-one(?Def(_))> anno*
      
      
  // Super()
  nabl-use-site(|lang, elems, tasks, paths, deps, states) =
    ?Super();
    where (result1 := <new-task(|tasks)> Resolve(<lookup-uri(|lang, Field())> paths, Field(), "super", [], All()));
    where (result2 := <new-task(|tasks)> PropCalc(Type(), result1));
    where (result3 := <new-task(|tasks)> Match("nabl-use-site_match_Super_0", result2));
    nabl-use(|lang, elems, tasks, paths, deps,
      UseCandidate(Class(), result3, [], Current(), One())
    )

  match-term:
    ("nabl-use-site_match_Super_0", types) -> <nabl-uri-name> uri
    where
      <fetch-elem(?Type(_{anno*}))> types;
      Def(uri) := <collect-one(?Def(_))> anno*
		
rules // Fields
    
  // FieldAccess(e, f)
  nabl-use-site(|lang, elems, tasks, paths, deps, states) =
    ?FieldAccess(e, f);
    where (result1 := <new-task(|tasks)> PropCalc(Type(), e));
    where (result2 := <new-task(|tasks, [<nabl-result-number> result1])> Match("nabl-use-site_match_FieldAccess_2", result1));
    FieldAccess(id, nabl-use(|lang, elems, tasks, paths, deps,
      UseCandidate(Field(), [], result2, One())
    ))
    
  match-term: 
    ("nabl-use-site_match_FieldAccess_2", Type(_{anno*})) -> uri
    where
      Def(uri) := <collect-one(?Def(_))> anno*
      
rules // Functions
  
  nabl-prop-site(|lang, elems, tasks, paths, states) =
    ?FunDef(t, x, p);
    where (result := <new-task(|tasks)> PropCalc(Type(), p));
    FunDef(id, nabl-props(|lang, elems, tasks, [
    	Prop(Type(), t)
    , Prop(ParameterTypes(), result)
  	]), id)

  nabl-prop-site(|lang, elems, tasks, paths, states) =
    ?FunDef(t, x, p, _);
    where (result := <new-task(|tasks)> PropCalc(Type(), p));
    FunDef(id, nabl-props(|lang, elems, tasks, [
    	Prop(Type(), t)
    , Prop(ParameterTypes(), result)
  	]), id, id)
    
  
  // FunCall(e, f, a)
  nabl-use-site(|lang, elems, tasks, paths, deps, states) =
    ?FunCall(e, x, a);
    where (result1 := <new-task(|tasks)> PropCalc(Type(), e));
    where (result2 := <new-task(|tasks, [<nabl-result-number> result1])> Match("nabl-use-site_match_FunCall_3", result1));
    where (result3 := <new-task(|tasks)> PropCalc(Type(), a));
    FunCall(id, nabl-use(|lang, elems, tasks, paths, deps,
      UseCandidate(Function(), [Prop(ParameterTypes(), result3)], result2, One())), 
    id)
    
  match-term: 
  	("nabl-use-site_match_FunCall_3", Type(_{anno*})) -> uri
    where
    	Def(uri) := <collect-one(?Def(_))> anno*
  
  
  // FunCall(x, a)
  nabl-use-site(|lang, elems, tasks, paths, deps, states) =
    ?FunCall(x, a);
    where (result := <new-task(|tasks)> PropCalc(Type(), a));
    FunCall(nabl-use(|lang, elems, tasks, paths, deps,
      UseCandidate(Function(), [Prop(ParameterTypes(), result)], Current(), All())), 
    id)

rules // Variable

  nabl-prop-site(|lang, elems, tasks, paths, states) =
    ?InferredVarDef(x, e);
    where (result := <new-task(|tasks)> PropCalc(Type(), e));
    InferredVarDef(nabl-props(|lang, elems, tasks, [
      Prop(Type(), result)
    ]), id)
  
  // VarRef(x)
  nabl-use-site(|lang, elems, tasks, paths, deps, states) =
    ?VarRef(x);
    VarRef(nabl-use(|lang, elems, tasks, paths, deps, [
    	UseCandidate(Variable(), [], Current(), All()), 
    	UseCandidate(Field(), [], Current(), All())
  	]))

rules // Name projections
  
  nabl-name:
    UsingPart(q, x) -> x

  nabl-name-apply(s):
    UsingPart(q, x) -> UsingPart(q, <s> x)
    
  nabl-name:
    UsingPart(x) -> x
    
  nabl-name-apply(s):
    UsingPart(x) -> UsingPart(<s> x)
    
  nabl-name:
    TypePart(q, x) -> x

  nabl-name-apply(s):
    TypePart(q, x) -> TypePart(q, <s> x)
    
  nabl-name:
    TypePart(x) -> x
    
  nabl-name-apply(s):
    TypePart(x) -> TypePart(<s> x)
    
rules // Scoping projections

  nabl-scopes = ?(Program(), Namespace())
  nabl-scopes = ?(Program(), Class())
  
  nabl-scopes = ?(Namespace(), Namespace())
  nabl-scopes = ?(Namespace(), Class())
  
  nabl-scopes = ?(Class(), Field())
  nabl-scopes = ?(Class(), Function())

  nabl-scopes = ?(Function(), Variable())
  
