module old-names

imports
  lib/nbl/-
  lib/task/-
  nbl/-
  include/CSharp
  desugar
  types


signature
  constructors
    NablNsNamespace : Namespace
    NablNsClass     : Namespace
    NablNsFunction  : Namespace
    NablNsField     : Namespace
    NablNsVariable  : Namespace


signature
  constructors
    NablProp_parameter-types : Property


rules

  nabl-def-site(child-uris, sibl-uris|lang, partition, uniques, elems, uris, states) =
    ?Namespace(x, _)
    ; Namespace(
        nabl-def(
          child-uris
        , sibl-uris
        | lang
        , partition
        , uniques
        , elems
        , uris
        , NablNsNamespace()
        , NonUnique()
        , Current()
        , [NablNsNamespace(), NablNsClass()]
        )
      , id
      )

  nabl-get-name :
    Namespace(x, _) -> x

  nabl-use-site(|lang, elems, tasks, uris, states) =
    ?UsingPart(x)
    ; UsingPart(
        nabl-use(
        | lang
        , elems
        , tasks
        , uris
        , [ UseCandidate(
              NablNsNamespace()
            , []
            , Current()
            , All()
            )
          ]
        )
      )

  nabl-get-name :
    UsingPart(u, x) -> x

  nabl-use-site(|lang, elems, tasks, uris, states) =
    ?UsingPart(u, x)
    ; UsingPart(
        id
      , nabl-use(
        | lang
        , elems
        , tasks
        , uris
        , []
        )
      )


rules

  nabl-def-site(child-uris, sibl-uris|lang, partition, uniques, elems, uris, states) =
    ?Class(x, _)
    ; Class(
        nabl-def(
          child-uris
        , sibl-uris
        | lang
        , partition
        , uniques
        , elems
        , uris
        , NablNsClass()
        , Unique()
        , Current()
        , [NablNsField(), NablNsFunction()]
        )
      , id
      )

  nabl-get-name :
    Class(x, _) -> x

  nabl-prop-site(|elems, tasks, states) =
    ?Class(x, _)
    ; Class(
        nabl-props(
        | elems
        , [Prop(Type(), Type(x))]
        )
      , id
      )

  nabl-def-site(child-uris, sibl-uris|lang, partition, uniques, elems, uris, states) =
    ?Class(x, y, _)
    ; Class(
        nabl-def(
          child-uris
        , sibl-uris
        | lang
        , partition
        , uniques
        , elems
        , uris
        , NablNsClass()
        , Unique()
        , Current()
        , [NablNsField(), NablNsFunction()]
        )
      , id
      , id
      )

  nabl-get-name :
    Class(x, y, _) -> x

  nabl-prop-site(|elems, tasks, states) =
    ?Class(x, y, _)
    ; Class(
        nabl-props(
        | elems
        , [Prop(Type(), Type(x))]
        )
      , id
      , id
      )

  nabl-use-site(|lang, elems, tasks, uris, states) =
    ?Class(x, y, _)
    ; Class(
        id
      , nabl-use(
        | lang
        , elems
        , tasks
        , uris
        , [ UseCandidate(
              NablNsClass()
            , []
            , Current()
            , All()
            )
          ]
        )
      , id
      )

  nabl-def-site(child-uris, sibl-uris|lang, partition, uniques, elems, uris, states) =
    ?Interface(x, _)
    ; Interface(
        nabl-def(
          child-uris
        , sibl-uris
        | lang
        , partition
        , uniques
        , elems
        , uris
        , NablNsClass()
        , Unique()
        , Current()
        , [NablNsFunction()]
        )
      , id
      )

  nabl-get-name :
    Interface(x, _) -> x

  nabl-prop-site(|elems, tasks, states) =
    ?Interface(x, _)
    ; Interface(
        nabl-props(
        | elems
        , [Prop(Type(), Type(x))]
        )
      , id
      )

  nabl-def-site(child-uris, sibl-uris|lang, partition, uniques, elems, uris, states) =
    ?Interface(x, y, _)
    ; Interface(
        nabl-def(
          child-uris
        , sibl-uris
        | lang
        , partition
        , uniques
        , elems
        , uris
        , NablNsClass()
        , Unique()
        , Current()
        , [NablNsFunction()]
        )
      , id
      , id
      )

  nabl-get-name :
    Interface(x, y, _) -> x

  nabl-prop-site(|elems, tasks, states) =
    ?Interface(x, y, _)
    ; Interface(
        nabl-props(
        | elems
        , [Prop(Type(), Type(x))]
        )
      , id
      , id
      )

  nabl-use-site(|lang, elems, tasks, uris, states) =
    ?Interface(x, y, _)
    ; Interface(
        id
      , nabl-use(
        | lang
        , elems
        , tasks
        , uris
        , [ UseCandidate(
              NablNsClass()
            , []
            , Current()
            , All()
            )
          ]
        )
      , id
      )

  nabl-def-site(child-uris, sibl-uris|lang, partition, uniques, elems, uris, states) =
    ?PartialClass(x, _)
    ; PartialClass(
        nabl-def(
          child-uris
        , sibl-uris
        | lang
        , partition
        , uniques
        , elems
        , uris
        , NablNsClass()
        , NonUnique()
        , Current()
        , [NablNsField(), NablNsFunction()]
        )
      , id
      )

  nabl-get-name :
    PartialClass(x, _) -> x

  nabl-prop-site(|elems, tasks, states) =
    ?PartialClass(x, _)
    ; PartialClass(
        nabl-props(
        | elems
        , [Prop(Type(), Type(x))]
        )
      , id
      )

  nabl-def-site(child-uris, sibl-uris|lang, partition, uniques, elems, uris, states) =
    ?PartialClass(x, y, _)
    ; PartialClass(
        nabl-def(
          child-uris
        , sibl-uris
        | lang
        , partition
        , uniques
        , elems
        , uris
        , NablNsClass()
        , NonUnique()
        , Current()
        , [NablNsField(), NablNsFunction()]
        )
      , id
      , id
      )

  nabl-get-name :
    PartialClass(x, y, _) -> x

  nabl-prop-site(|elems, tasks, states) =
    ?PartialClass(x, y, _)
    ; PartialClass(
        nabl-props(
        | elems
        , [Prop(Type(), Type(x))]
        )
      , id
      , id
      )

  nabl-use-site(|lang, elems, tasks, uris, states) =
    ?PartialClass(x, y, _)
    ; PartialClass(
        id
      , nabl-use(
        | lang
        , elems
        , tasks
        , uris
        , [ UseCandidate(
              NablNsClass()
            , []
            , Current()
            , All()
            )
          ]
        )
      , id
      )

  nabl-get-name :
    TypePart(c) -> c

  nabl-use-site(|lang, elems, tasks, uris, states) =
    ?TypePart(c)
    ; TypePart(
        nabl-use(
        | lang
        , elems
        , tasks
        , uris
        , [ UseCandidate(
              NablNsNamespace()
            , []
            , Current()
            , All()
            )
          , UseCandidate(
              NablNsClass()
            , []
            , Current()
            , All()
            )
          ]
        )
      )


rules

  nabl-def-site(child-uris, sibl-uris|lang, partition, uniques, elems, uris, states) =
    ?FieldDef(t, x)
    ; FieldDef(
        id
      , nabl-def(
          child-uris
        , sibl-uris
        | lang
        , partition
        , uniques
        , elems
        , uris
        , NablNsField()
        , Unique()
        , Current()
        , []
        )
      )

  nabl-get-name :
    FieldDef(t, x) -> x

  nabl-prop-site(|elems, tasks, states) =
    ?FieldDef(t, x)
    ; FieldDef(
        id
      , nabl-props(
        | elems
        , [Prop(Type(), t)]
        )
      )

  nabl-get-name :
    FieldAccess(exp, f) -> f

  nabl-match :
    ("match2", Type(t), []) -> t

  nabl-use-site(|lang, elems, tasks, uris, states) =
    ?FieldAccess(exp, f)
    ; where(r0 := <new-task(|tasks)> PropCalc(Type(), exp))
    ; where(r1 := <new-task(|tasks)> Match("match2", [], r0))
    ; FieldAccess(
        id
      , nabl-use(
        | lang
        , elems
        , tasks
        , uris
        , [ UseCandidate(
              NablNsField()
            , []
            , [r1]
            , One()
            )
          ]
        )
      )


rules

  nabl-def-site(child-uris, sibl-uris|lang, partition, uniques, elems, uris, states) =
    ?FunDef(t, x, p*)
    ; FunDef(
        id
      , nabl-def(
          child-uris
        , sibl-uris
        | lang
        , partition
        , uniques
        , elems
        , uris
        , NablNsFunction()
        , Unique()
        , Current()
        , []
        )
      , id
      )

  nabl-get-name :
    FunDef(t, x, p*) -> x

  nabl-prop-site(|elems, tasks, states) =
    ?FunDef(t, x, p*)
    ; where(r0 := <new-task(|tasks)> PropCalc(Type(), p*))
    ; FunDef(
        id
      , nabl-props(
        | elems
        , [ Prop(Type(), t)
          , Prop(NablProp_parameter-types(), r0)
          ]
        )
      , id
      )

  nabl-def-site(child-uris, sibl-uris|lang, partition, uniques, elems, uris, states) =
    ?FunDef(t, x, p*, _)
    ; FunDef(
        id
      , nabl-def(
          child-uris
        , sibl-uris
        | lang
        , partition
        , uniques
        , elems
        , uris
        , NablNsFunction()
        , Unique()
        , Current()
        , [NablNsVariable()]
        )
      , id
      , id
      )

  nabl-get-name :
    FunDef(t, x, p*, _) -> x

  nabl-prop-site(|elems, tasks, states) =
    ?FunDef(t, x, p*, _)
    ; where(r0 := <new-task(|tasks)> PropCalc(Type(), p*))
    ; FunDef(
        id
      , nabl-props(
        | elems
        , [ Prop(Type(), t)
          , Prop(NablProp_parameter-types(), r0)
          ]
        )
      , id
      , id
      )

  nabl-get-name :
    FunCall(exp, f, args) -> f

  nabl-match :
    ("match3", Type(e), []) -> e

  nabl-use-site(|lang, elems, tasks, uris, states) =
    ?FunCall(exp, f, args)
    ; where(r0 := <new-task(|tasks)> PropCalc(Type(), exp))
    ; where(r1 := <new-task(|tasks)> Match("match3", [], r0))
    ; where(r2 := <new-task(|tasks)> PropCalc(Type(), args))
    ; FunCall(
        id
      , nabl-use(
        | lang
        , elems
        , tasks
        , uris
        , [ UseCandidate(
              NablNsFunction()
            , [Prop(NablProp_parameter-types(), r2)]
            , [r1]
            , One()
            )
          ]
        )
      , id
      )

  nabl-get-name :
    FunCall(x, args) -> x

  nabl-use-site(|lang, elems, tasks, uris, states) =
    ?FunCall(x, args)
    ; where(r0 := <new-task(|tasks)> PropCalc(Type(), args))
    ; FunCall(
        nabl-use(
        | lang
        , elems
        , tasks
        , uris
        , [ UseCandidate(
              NablNsFunction()
            , [Prop(NablProp_parameter-types(), r0)]
            , Current()
            , All()
            )
          ]
        )
      , id
      )

  nabl-def-site(child-uris, sibl-uris|lang, partition, uniques, elems, uris, states) =
    ?Param(t, x)
    ; Param(
        id
      , nabl-def(
          child-uris
        , sibl-uris
        | lang
        , partition
        , uniques
        , elems
        , uris
        , NablNsVariable()
        , Unique()
        , Current()
        , []
        )
      )

  nabl-get-name :
    Param(t, x) -> x

  nabl-prop-site(|elems, tasks, states) =
    ?Param(t, x)
    ; Param(
        id
      , nabl-props(
        | elems
        , [Prop(Type(), t)]
        )
      )


rules

  nabl-def-site(child-uris, sibl-uris|lang, partition, uniques, elems, uris, states) =
    ?VarDef(t, x, _)
    ; VarDef(
        id
      , nabl-def(
          child-uris
        , sibl-uris
        | lang
        , partition
        , uniques
        , elems
        , uris
        , NablNsVariable()
        , Unique()
        , [Subsequent()]
        , []
        )
      , id
      )

  nabl-get-name :
    VarDef(t, x, _) -> x

  nabl-prop-site(|elems, tasks, states) =
    ?VarDef(t, x, _)
    ; VarDef(
        id
      , nabl-props(
        | elems
        , [Prop(Type(), t)]
        )
      , id
      )

  nabl-def-site(child-uris, sibl-uris|lang, partition, uniques, elems, uris, states) =
    ?VarDef(t, x)
    ; VarDef(
        id
      , nabl-def(
          child-uris
        , sibl-uris
        | lang
        , partition
        , uniques
        , elems
        , uris
        , NablNsVariable()
        , Unique()
        , [Subsequent()]
        , []
        )
      )

  nabl-get-name :
    VarDef(t, x) -> x

  nabl-prop-site(|elems, tasks, states) =
    ?VarDef(t, x)
    ; VarDef(
        id
      , nabl-props(
        | elems
        , [Prop(Type(), t)]
        )
      )

  nabl-def-site(child-uris, sibl-uris|lang, partition, uniques, elems, uris, states) =
    ?InferredVarDef(x, e)
    ; InferredVarDef(
        nabl-def(
          child-uris
        , sibl-uris
        | lang
        , partition
        , uniques
        , elems
        , uris
        , NablNsVariable()
        , Unique()
        , [Subsequent()]
        , []
        )
      , id
      )

  nabl-get-name :
    InferredVarDef(x, e) -> x

  nabl-prop-site(|elems, tasks, states) =
    ?InferredVarDef(x, e)
    ; where(r0 := <new-task(|tasks)> PropCalc(Type(), e))
    ; InferredVarDef(
        nabl-props(
        | elems
        , [Prop(Type(), r0)]
        )
      , id
      )

  nabl-get-name :
    VarRef(x) -> x

  nabl-use-site(|lang, elems, tasks, uris, states) =
    ?VarRef(x)
    ; VarRef(
        nabl-use(
        | lang
        , elems
        , tasks
        , uris
        , [ UseCandidate(
              NablNsVariable()
            , []
            , Current()
            , All()
            )
          , UseCandidate(
              NablNsField()
            , []
            , Current()
            , All()
            )
          ]
        )
      )


rules

  nabl-def-site(child-uris, sibl-uris|lang, partition, uniques, elems, uris, states) =
    ?For(t, x, init, cond, stmt, body)
    ; where(scope := <nabl-construct-def-scope(|lang, partition, uniques)> NablNsVariable())
    ; For(
        id
      , nabl-def(
          child-uris
        , sibl-uris
        | lang
        , partition
        , uniques
        , elems
        , uris
        , NablNsVariable()
        , Unique()
        , [scope]
        , []
        )
      , id
      , nabl-def-scope(|scope)
      , nabl-def-scope(|scope)
      , nabl-def-scope(|scope)
      )

  nabl-get-name :
    For(t, x, init, cond, stmt, body) -> x

  nabl-prop-site(|elems, tasks, states) =
    ?For(t, x, init, cond, stmt, body)
    ; For(
        id
      , nabl-props(
        | elems
        , [Prop(Type(), t)]
        )
      , id
      , id
      , id
      , id
      )

  nabl-def-site(child-uris, sibl-uris|lang, partition, uniques, elems, uris, states) =
    ?ForEach(t, x, e, body)
    ; where(scope := <nabl-construct-def-scope(|lang, partition, uniques)> NablNsVariable())
    ; ForEach(
        id
      , nabl-def(
          child-uris
        , sibl-uris
        | lang
        , partition
        , uniques
        , elems
        , uris
        , NablNsVariable()
        , Unique()
        , [scope]
        , []
        )
      , id
      , nabl-def-scope(|scope)
      )

  nabl-get-name :
    ForEach(t, x, e, body) -> x

  nabl-prop-site(|elems, tasks, states) =
    ?ForEach(t, x, e, body)
    ; ForEach(
        id
      , nabl-props(
        | elems
        , [Prop(Type(), t)]
        )
      , id
      , id
      )

  nabl-anonymous-scope-site(child-uris|lang, partition, uniques, uris, states) =
    ?Block(stmt*)
    ; nabl-anonymous-scope(
        child-uris
      | lang
      , partition
      , uniques
      , uris
      , [NablNsVariable()]
      )