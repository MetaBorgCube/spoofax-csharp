module old-names

imports
  nbl/-
  include/CSharp
  desugar
  types


signature
  constructors
    Program   : Namespace
    Namespace : Namespace
    Using     : Namespace
    Class     : Namespace
    Function  : Namespace
    Field     : Namespace
    Variable  : Namespace


rules

  nabl-def-site(cpaths, spaths|lang, elems, tasks, paths) =
    ?Namespace(x, _)
    ; Namespace(
        nabl-def(
          cpaths
        , spaths
        | lang
        , elems
        , tasks
        , paths
        , Namespace()
        , NonUnique()
        , Current()
        , [Namespace(), Class()]
        )
      , id
      )

  nabl-scope-site(cpaths|lang, paths) =
    ?UsingPart(x)
    ; nabl-anonymous-scope(cpaths|lang, paths, [])

  nabl-scope-site(cpaths|lang, paths) =
    ?UsingPart(u, x)
    ; nabl-anonymous-scope(cpaths|lang, paths, [])


rules

  nabl-def-site(cpaths, spaths|lang, elems, tasks, paths) =
    ?Class(x, _)
    ; Class(
        nabl-def(
          cpaths
        , spaths
        | lang
        , elems
        , tasks
        , paths
        , Class()
        , <nabl-unique-qualifier>
        , Current()
        , [Field(), Function()]
        )
      , id
      )

  nabl-prop-site(|lang, elems, tasks) =
    ?Class(x, _)
    ; Class(
        nabl-props(
        | lang
        , elems
        , tasks
        , [Prop(Type(), Type(x))]
        )
      , id
      )

  nabl-def-site(cpaths, spaths|lang, elems, tasks, paths) =
    ?Class(x, y, _)
    ; Class(
        nabl-def(
          cpaths
        , spaths
        | lang
        , elems
        , tasks
        , paths
        , Class()
        , <nabl-unique-qualifier>
        , Current()
        , [Field(), Function()]
        )
      , id
      , id
      )

  nabl-prop-site(|lang, elems, tasks) =
    ?Class(x, y, _)
    ; Class(
        nabl-props(
        | lang
        , elems
        , tasks
        , [Prop(Type(), Type(x))]
        )
      , id
      , id
      )

  nabl-def-site(cpaths, spaths|lang, elems, tasks, paths) =
    ?Interface(x, _)
    ; Interface(
        nabl-def(
          cpaths
        , spaths
        | lang
        , elems
        , tasks
        , paths
        , Class()
        , <nabl-unique-qualifier>
        , Current()
        , [Function()]
        )
      , id
      )

  nabl-prop-site(|lang, elems, tasks) =
    ?Interface(x, _)
    ; Interface(
        nabl-props(
        | lang
        , elems
        , tasks
        , [Prop(Type(), Type(x))]
        )
      , id
      )

  nabl-def-site(cpaths, spaths|lang, elems, tasks, paths) =
    ?Interface(x, y, _)
    ; Interface(
        nabl-def(
          cpaths
        , spaths
        | lang
        , elems
        , tasks
        , paths
        , Class()
        , <nabl-unique-qualifier>
        , Current()
        , [Function()]
        )
      , id
      , id
      )

  nabl-prop-site(|lang, elems, tasks) =
    ?Interface(x, y, _)
    ; Interface(
        nabl-props(
        | lang
        , elems
        , tasks
        , [Prop(Type(), Type(x))]
        )
      , id
      , id
      )

  nabl-def-site(cpaths, spaths|lang, elems, tasks, paths) =
    ?PartialClass(x, _)
    ; PartialClass(
        nabl-def(
          cpaths
        , spaths
        | lang
        , elems
        , tasks
        , paths
        , Class()
        , NonUnique()
        , Current()
        , [Field(), Function()]
        )
      , id
      )

  nabl-prop-site(|lang, elems, tasks) =
    ?PartialClass(x, _)
    ; PartialClass(
        nabl-props(
        | lang
        , elems
        , tasks
        , [Prop(Type(), Type(x))]
        )
      , id
      )

  nabl-def-site(cpaths, spaths|lang, elems, tasks, paths) =
    ?PartialClass(x, y, _)
    ; PartialClass(
        nabl-def(
          cpaths
        , spaths
        | lang
        , elems
        , tasks
        , paths
        , Class()
        , NonUnique()
        , Current()
        , [Field(), Function()]
        )
      , id
      , id
      )

  nabl-prop-site(|lang, elems, tasks) =
    ?PartialClass(x, y, _)
    ; PartialClass(
        nabl-props(
        | lang
        , elems
        , tasks
        , [Prop(Type(), Type(x))]
        )
      , id
      , id
      )

  nabl-scope-site(cpaths|lang, paths) =
    ?Type(c)
    ; nabl-anonymous-scope(cpaths|lang, paths, [])


rules

  nabl-def-site(cpaths, spaths|lang, elems, tasks, paths) =
    ?FieldDef(t, x)
    ; FieldDef(
        id
      , nabl-def(
          cpaths
        , spaths
        | lang
        , elems
        , tasks
        , paths
        , Field()
        , <nabl-unique-qualifier>
        , Current()
        , []
        )
      )

  nabl-prop-site(|lang, elems, tasks) =
    ?FieldDef(t, x)
    ; FieldDef(
        id
      , nabl-props(
        | lang
        , elems
        , tasks
        , [Prop(Type(), t)]
        )
      )

  nabl-scope-site(cpaths|lang, paths) =
    ?FieldAccess(exp, f)
    ; nabl-anonymous-scope(cpaths|lang, paths, [])


rules

  nabl-def-site(cpaths, spaths|lang, elems, tasks, paths) =
    ?FunDef(t, x, _)
    ; FunDef(
        id
      , nabl-def(
          cpaths
        , spaths
        | lang
        , elems
        , tasks
        , paths
        , Function()
        , <nabl-unique-qualifier>
        , Current()
        , []
        )
      , id
      )

  nabl-prop-site(|lang, elems, tasks) =
    ?FunDef(t, x, _)
    ; FunDef(
        id
      , nabl-props(
        | lang
        , elems
        , tasks
        , [Prop(Type(), t)]
        )
      , id
      )

  nabl-def-site(cpaths, spaths|lang, elems, tasks, paths) =
    ?FunDef(t, x, _, _)
    ; FunDef(
        id
      , nabl-def(
          cpaths
        , spaths
        | lang
        , elems
        , tasks
        , paths
        , Function()
        , <nabl-unique-qualifier>
        , Current()
        , [Variable(), Field()]
        )
      , id
      , id
      )

  nabl-prop-site(|lang, elems, tasks) =
    ?FunDef(t, x, _, _)
    ; FunDef(
        id
      , nabl-props(
        | lang
        , elems
        , tasks
        , [Prop(Type(), t)]
        )
      , id
      , id
      )

  nabl-scope-site(cpaths|lang, paths) =
    ?FunCall(exp, f, _)
    ; nabl-anonymous-scope(cpaths|lang, paths, [])

  nabl-scope-site(cpaths|lang, paths) =
    ?FunCall(x, _)
    ; nabl-anonymous-scope(cpaths|lang, paths, [])

  nabl-def-site(cpaths, spaths|lang, elems, tasks, paths) =
    ?Param(t, x)
    ; Param(
        id
      , nabl-def(
          cpaths
        , spaths
        | lang
        , elems
        , tasks
        , paths
        , Variable()
        , <nabl-unique-qualifier>
        , Current()
        , []
        )
      )

  nabl-prop-site(|lang, elems, tasks) =
    ?Param(t, x)
    ; Param(
        id
      , nabl-props(
        | lang
        , elems
        , tasks
        , [Prop(Type(), t)]
        )
      )


rules

  nabl-def-site(cpaths, spaths|lang, elems, tasks, paths) =
    ?VarDef(t, x, _)
    ; VarDef(
        id
      , nabl-def(
          cpaths
        , spaths
        | lang
        , elems
        , tasks
        , paths
        , Variable()
        , <nabl-unique-qualifier>
        , []
        , []
        )
      , id
      )

  nabl-prop-site(|lang, elems, tasks) =
    ?VarDef(t, x, _)
    ; VarDef(
        id
      , nabl-props(
        | lang
        , elems
        , tasks
        , [Prop(Type(), t)]
        )
      , id
      )

  nabl-def-site(cpaths, spaths|lang, elems, tasks, paths) =
    ?VarDef(t, x)
    ; VarDef(
        id
      , nabl-def(
          cpaths
        , spaths
        | lang
        , elems
        , tasks
        , paths
        , Variable()
        , <nabl-unique-qualifier>
        , []
        , []
        )
      )

  nabl-prop-site(|lang, elems, tasks) =
    ?VarDef(t, x)
    ; VarDef(
        id
      , nabl-props(
        | lang
        , elems
        , tasks
        , [Prop(Type(), t)]
        )
      )

  nabl-scope-site(cpaths|lang, paths) =
    ?VarRef(x)
    ; nabl-anonymous-scope(cpaths|lang, paths, [])

  nabl-scope-site(cpaths|lang, paths) =
    ?Assign(x, _)
    ; nabl-anonymous-scope(cpaths|lang, paths, [])


rules

  nabl-def-site(cpaths, spaths|lang, elems, tasks, paths) =
    ?For(t, x, init, cond, stmt, body)
    ; where(scope := <nabl-def-scope> [Variable()])
    ; For(
        id
      , nabl-def(
          cpaths
        , spaths
        | lang
        , elems
        , tasks
        , paths
        , Variable()
        , <nabl-unique-qualifier>
        , []
        , []
        )
      , id
      , nabl-def-scope(|scope)
      , nabl-def-scope(|scope)
      , nabl-def-scope(|scope)
      )

  nabl-prop-site(|lang, elems, tasks) =
    ?For(t, x, init, cond, stmt, body)
    ; For(
        id
      , nabl-props(
        | lang
        , elems
        , tasks
        , [Prop(Type(), t)]
        )
      , id
      , id
      , id
      , id
      )

  nabl-def-site(cpaths, spaths|lang, elems, tasks, paths) =
    ?ForEach(t, x, e, body)
    ; where(scope := <nabl-def-scope> [Variable()])
    ; ForEach(
        id
      , nabl-def(
          cpaths
        , spaths
        | lang
        , elems
        , tasks
        , paths
        , Variable()
        , <nabl-unique-qualifier>
        , []
        , []
        )
      , id
      , nabl-def-scope(|scope)
      )

  nabl-prop-site(|lang, elems, tasks) =
    ?ForEach(t, x, e, body)
    ; ForEach(
        id
      , nabl-props(
        | lang
        , elems
        , tasks
        , [Prop(Type(), t)]
        )
      , id
      , id
      )

  nabl-scope-site(cpaths|lang, paths) =
    ?Block(stmt*)
    ; nabl-anonymous-scope(
        cpaths
      | lang
      , paths
      , [Variable()]
      )