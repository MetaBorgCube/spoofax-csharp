module csharp

imports
  
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  libstratego-parallel
  include/CSharp
  lib/editor-common.generated
  lib/index-library.generated
  lib/analysis/-
  lib/nbl/-
  lib/task/-
  lib/index/partition
  new-names
  check
  desugar
  types

rules // Analysis
  
  editor-analyze:
    (ast, path, project-path) -> (ast', errors, warnings, notes)
    with
      editor-init;
      (ast', error*)            := <desugar-all; analyze-one(|<language>, path, project-path)> ast;
      (errors, warnings, notes) := <editor-analyze-markers> ast'
      // TODO: Update markers for partitions that have had a task executed.

  editor-analyze:
    path* -> None()
    where
      not(is-tuple)
    with
      map(\p -> $[[<project-path>]/[p]]\);
      editor-queue-analyze-multiple
      
  editor-save:
  	(_, _, _, path, project-path) -> None()
  	with
  		index-setup(|<language>, [project-path], $[[project-path]/[path]]);
  		index-commit

  editor-analyze-markers:
    ast -> (errors, warnings, notes)
    with
      errors   := <collect-all(constraint-error, conc)> ast;
      warnings := <collect-all(constraint-warning, conc)> ast;
      notes    := <collect-all(constraint-note, conc)> ast

  editor-update-markers:
    Result(partition, initial-ast, analyzed-ast, changed-read*, _, _, _) -> 
    Result(partition, initial-ast, analyzed-ast, changed-read*, errors, warnings, notes)
    where
      not(() := initial-ast)
    with
      (errors, warnings, notes) := <editor-analyze-markers> analyzed-ast;
      <set-markers(|initial-ast)> (analyzed-ast, errors, warnings, notes)

  editor-queue-analyze-multiple:
    path* -> None()
    with
      if not([] := path*) then
        queue-strategy(|"editor-analyze-multiple", "Analyzing files")
      end

  editor-analyze-multiple:
    path* -> (task*, error*, result'*)
    with
      nabl-analyze-multiple-work-units; set-total-work-units;
      (task*, error*, result*) := <analyze-multiple(parse-file; desugar-all, try, complete-work-unit|<language>, <project-path>)> path*;
      result'*                 := <filter(editor-update-markers)> result*
      where(index-commit)
      // TODO: Update markers for partitions that have had a task executed.
      
rules // Editor services

  editor-resolve:
    (node, position, ast, path, project-path) -> definition
    where
    	task-setup(|project-path);
    	index-setup(|<language>, [project-path], $[[project-path]/[path]]);
    	<nabl-has-reference> node;
    	definition := <nabl-collect-one-resolved-def> node

  editor-hover:
    (target, position, ast, path, project-path) -> $[Type: [<print-type> type]]
    where
      type := <type-of; print-type> target

  editor-complete:
    (node, position, ast, path, project-path) -> proposals
    where
     proposals := <nabl-propose-completions> ast

rules // Debugging
  
  debug-generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := <desugar-all> selected;
      <queue-analysis> $[[project-path]/[path]]
      
  debug-generate-analyzed:
    (selected, position, ast, path, project-path) -> (filename, selected)
    with
      filename := <guarantee-extension(|"analyzed.aterm")> path

  debug-show-current-partition =
    analysis-debug-show-current-partition(|<language>)
     
  debug-show-all-partitions =
    analysis-debug-show-all-partitions(|<language>)

  debug-reset-index =
    analysis-debug-reset-index(|<language>)
    
  debug-reset-task =
  	analysis-debug-reset-task(|<language>)
  	
  debug-reanalyze = 
  	analysis-debug-reanalyze(|<language>)
