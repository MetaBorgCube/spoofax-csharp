module csharp

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/CSharp
  lib/editor-common.generated
  lib/index-library.generated
  lib/index/core
  lib/nbl/-
  new-names
  check
  desugar

rules // Analysis
  
	// Main entry point for analyzes, called when a single file is opened in the editor.
  editor-analyze:
    (ast, path, project-path) -> (ast', [], [], [])
    with
      editor-init;
      (ast', entries, errors, dependent) := <desugar-all; nbl-analyze(|<language>, path, project-path)> ast;
      <map(debug(!"Entry: "))> entries;
      <map(debug(!"Error: "))> errors;
      <map(debug(!"Dependency: "))> dependent

rules // Editor services

  editor-resolve:
    (node, position, ast, path, project-path) -> definition
    where
    	index-setup(|<language>, [project-path], $[[project-path]/[path]]);
    	_{anno*} := node;
    	definition := <collect-one(try-resolve)> anno*
    	
  try-resolve:
    Use(Result(number)) -> definition
    where
      uri := <nbl-get-value> DoneTask(number, ());
      definition := <nbl-get> Def(uri)

  // Returns "hover help" information for a particular node in the editor.
  // For references, this rule is invoked using the resolved term.
  editor-hover:
    (target, position, ast, path, project-path) -> (target, <type-of <+ !"no type">target)

  // Completes an identifier when the user presses control-space
  // (the completion identifier in the AST provides additional context information)
  editor-complete:
    (node, position, ast, path, project-path) -> <fail> //proposals'
    // where
    //   editor-init;
    //   (ast', _) := <analyze-top(|<language>)> (ast, path, project-path);
    //   item@COMPLETION(name) := <collect-one(?COMPLETION(_))> ast';
    //   index-transaction(
    //     (<index-lookup-all(|name)> item <+ ![]) => proposals
    //   );
    //   proposals' := <map(index-uri; index-uri-name)> proposals

rules // Debugging
  
  // Prints the abstract syntax ATerm of a selection.
  debug-generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := <desugar-all> selected
      
  // Prints the analyzed annotated abstract syntax ATerm of a selection.
  debug-generate-analyzed:
    (selected, position, ast, path, project-path) -> (filename, selected)
    with
      editor-init;
      filename := <guarantee-extension(|"analyzed.aterm")> path
      
  // Prints the entries in the index of the current file.
  debug-index-show-current-file:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
      filename := <guarantee-extension(|"index.currentfile.aterm")> path;
      result   := <index-get-all-in-file> path
      
  // Prints the entries in the index of all files.
  debug-index-show-all-files:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
      filename := <guarantee-extension(|"index.allfiles.aterm")> path;
      result   := <map(\filename -> (filename, <index-get-all-in-file> filename)\)> <index-get-all-files>

  // Cleans current file from the index.
  debug-index-clear-current:
    (selected, position, ast, path, project-path)  -> None()
    with
      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
      <index-clear-file> $[[project-path]/[path]]
      
  // Cleans all data from the index.
  debug-index-clear:
    (selected, position, ast, path, project-path)  -> None()
    with
      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
      index-clear
      
  // Cleans all data from the index and re-analyzes every file.
  debug-index-reload:
    (selected, position, ast, path, project-path)  -> None()
    with
      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
      index-reload