module csharp

imports
  
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  libstratego-parallel
  include/CSharp
  lib/editor-common.generated
  lib/index-library.generated
  lib/nbl/-
  new-names
  check
  desugar
  types

rules // Analysis
  
	// Main entry point for analyzes, called when a single file is opened in the editor.
  editor-analyze:
    (ast, path, project-path) -> (ast', errors, warnings, notes)
    with
      editor-init;
      (ast', entries, tasks, dependent) := <desugar-all; nbl-analyze(|<language>, path, project-path)> ast;
      (errors, warnings, notes) := <analyze-markers> ast';
      <map(vdebug(!"Entry: "))> entries;
      <map(vdebug(!"Tasks: "))> tasks;
      <map(vdebug(!"Dependency: "))> dependent

  editor-analyze:
    files -> None()
    where
      not(is-tuple)
    with
      queue-strategy(|"analyze-multiple", "Analyzing files")

  analyze-markers:
    ast -> (errors, warnings, notes)
    with
      index-transaction(
        errors   := <collect-all(constraint-error, conc)> ast;
        warnings := <collect-all(constraint-warning, conc)> ast;
        notes    := <collect-all(constraint-note, conc)> ast
      )

  update-markers:
    Result(_, ast, ast', _, _, _, _) -> <id>
    where
      not(() := ast)
    with
      (errors, warnings, notes) := <analyze-markers> ast';
      <set-markers(|ast)> (ast', errors, warnings, notes)

  analyze-multiple:
    path* -> result*
    with
      nbl-analyze-multiple-work-units; set-total-work-units;
      fullPath* := <map(\p -> $[[<project-path>]/[p]]\)> path*;
      measure-time(
        result* := <nbl-analyze-multiple(parse-file; desugar-all, parallel-unordered, complete-work-unit|<language>, <project-path>); 
          filter(update-markers)> fullPath*
      ) => <debug(!"Analysis seconds: ")> 
      
  measure-time(s) =
    where(before := <times>);
    s;
    after := <times>;
    !(after, before); diff-times; times-to-seconds; Fst
      
rules // Editor services

  constraint-error:
    node -> (node, "Unresolved reference.")
    where
      nbl-is-unresolved
      
  constraint-error:
    node -> (node, "Duplicate definition.")
    where
      nbl-is-duplicate-definition
      
  constraint-error:
    node -> (node, $[Ambiguous, could be from [<map(nbl-print-uri); separate-by(|", "); concat-strings> ambiguity*]])
    where
      ambiguity* := <nbl-get-ambiguities> node

  editor-resolve:
    (node, position, ast, path, project-path) -> definition
    where
    	index-setup(|<language>, [project-path], $[[project-path]/[path]]);
    	<nbl-has-reference> node;
    	definition := <nbl-resolve-collect-one> node

  editor-hover:
    (target, position, ast, path, project-path) -> $[Type: [<print-type> type]]
    where
      type := <type-of> target

  editor-complete:
    (node, position, ast, path, project-path) -> proposals
    where
     proposals := <nbl-propose-completions> ast

rules // Debugging
  
  // Prints the abstract syntax ATerm of a selection.
  debug-generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := <desugar-all> selected;
      <queue-analysis> $[[project-path]/[path]]
      
  // Prints the analyzed annotated abstract syntax ATerm of a selection.
  debug-generate-analyzed:
    (selected, position, ast, path, project-path) -> (filename, selected)
    with
      filename := <guarantee-extension(|"analyzed.aterm")> path
   
rules // NBL debugging
     
  debug-show-current-partition = 
  	nbl-debug-show-current-partition(|<language>)
    
  debug-show-all-partitions =
    nbl-debug-show-all-partitions(|<language>)

  debug-clear-current =
    nbl-debug-clear-current(|<language>)
    
  debug-clear-all =
    nbl-debug-clear-all(|<language>)  

  debug-reload = 
  	nbl-debug-reload(|<language>)
