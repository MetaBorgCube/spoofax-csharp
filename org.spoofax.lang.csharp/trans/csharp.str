module csharp

imports
  
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  libstratego-parallel
  include/CSharp
  lib/editor-common.generated
  lib/index-library.generated
  lib/nbl/-
  lib/index/partition
  new-names
  check
  desugar
  types

rules // Analysis
  
	// Main entry point for analyzes, called when a single file is opened in the editor.
  editor-analyze:
    (ast, path, project-path) -> (ast', errors, warnings, notes)
    with
      editor-init;
      (ast', entries, tasks, dependent) := <desugar-all; nbl-analyze(|<language>, path, project-path)> ast;
      (errors, warnings, notes)         := <analyze-markers> ast';
      <map(vdebug(!"Entry: "))> entries;
      <map(vdebug(!"Tasks: "))> tasks;
      <map(vdebug(!"Dependent: "))> dependent;
      <queue-analyze-multiple> <map(index-partition-file)> dependent

  editor-analyze:
    path* -> None()
    where
      not(is-tuple)
    with
      map(\p -> $[[<project-path>]/[p]]\);
      queue-analyze-multiple
      
  editor-save:
  	(_, _, _, path, project-path) -> None()
  	with
  		index-setup(|<language>, [project-path], $[[project-path]/[path]]);
  		index-commit

  analyze-markers:
    ast -> (errors, warnings, notes)
    with
      index-transaction(
        errors   := <collect-all(constraint-error, conc)> ast;
        warnings := <collect-all(constraint-warning, conc)> ast;
        notes    := <collect-all(constraint-note, conc)> ast
      )

  update-markers:
    Result(_, ast, ast', _, _, _, _) -> <id>
    where
      not(() := ast)
    with
      (errors, warnings, notes) := <analyze-markers> ast';
      <set-markers(|ast)> (ast', errors, warnings, notes)

  queue-analyze-multiple:
    path* -> None()
    with
      if not([] := path*) then
        queue-strategy(|"analyze-multiple", "Analyzing files")
      end

  analyze-multiple:
    path* -> result*
    with
      nbl-analyze-multiple-work-units; set-total-work-units;
      measure-time(
        result* := <nbl-analyze-multiple(parse-file; desugar-all, parallel-unordered, complete-work-unit|<language>, <project-path>); 
          filter(update-markers)> path*
      , vdebug(!"Analysis seconds: ")
      );
      where(index-commit);
      mapconcat(nbl-result-dependent);
      map(index-partition-file);
      make-set;
      queue-analyze-multiple
      
  measure-time(s, log) =
    where(before := <times>);
    s;
    where(after := <times>; !(after, before); diff-times; times-to-seconds; Fst; log)
      
rules // Editor services

  editor-resolve:
    (node, position, ast, path, project-path) -> definition
    where
    	index-setup(|<language>, [project-path], $[[project-path]/[path]]);
    	<nbl-has-reference> node;
    	definition := <nbl-resolve-collect-one> node

  editor-hover:
    (target, position, ast, path, project-path) -> $[Type: [<print-type> type]]
    where
      type := <type-of; print-type> target

  editor-complete:
    (node, position, ast, path, project-path) -> proposals
    where
     proposals := <nbl-propose-completions> ast

rules // Debugging
  
  // Prints the abstract syntax ATerm of a selection.
  debug-generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := <desugar-all> selected;
      <queue-analysis> $[[project-path]/[path]]
      
  // Prints the analyzed annotated abstract syntax ATerm of a selection.
  debug-generate-analyzed:
    (selected, position, ast, path, project-path) -> (filename, selected)
    with
      filename := <guarantee-extension(|"analyzed.aterm")> path
   
rules // NBL debugging
     
  debug-show-current-partition = 
  	nbl-debug-show-current-partition(|<language>)
    
  debug-show-all-partitions =
    nbl-debug-show-all-partitions(|<language>)

  debug-clear-current =
    nbl-debug-clear-current(|<language>)
    
  debug-clear-all =
    nbl-debug-clear-all(|<language>)  

  debug-reload = 
  	nbl-debug-reload(|<language>)
