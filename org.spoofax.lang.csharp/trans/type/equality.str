module type/equality

imports
  include/CSharp
  nabl/-
  types/-
  type/-
  properties/eq
  
signature constructors

  Coerce   : Relation
  BinCoerce: Relation
  
rules // interface
  
  nabl-property-eq = ?(Type(), Eq(), <all(try(normalise-type)); eq; Fst>)
  nabl-property-eq = ?(Type(), Coerce(), <all(try(normalise-type)); (eq; Fst + coerce)>)
  nabl-property-eq = ?(Type(), BinCoerce(), <all(try(normalise-type)); (eq; Fst + coerce + Swap ; coerce)>)
  
rules 

  // class types
  normalise-type =
     stdlib
  <+ ( ?TypeExp(TypePart(_, <id>)) 
     + ?TypeExp(TypePart(<id>))
     )
   ; !ClassTy(<try(def-to-use)>)

  def-to-use: 
    t -> <set-annos> (t{}, <get-annos; fetch(?d@Def(_); !Use([d]))>)
  
  // standard library
  stdlib =
    ?ClassTy(n)  
    ; where( <not(has-annos)> n <+ <nabl-collect-one-resolved-def; nabl-uri; nabl-uri-path> n => [_] )
    ; switch !n
      case "Int"   : !IntTy
      case "Bool"  : !BoolTy
      case "String": !StringTy
      end
        
rules // coercion
	
  coerce: (IntTy(), StringTy()) -> StringTy()
  
  