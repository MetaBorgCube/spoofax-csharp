module types

imports
	
  include/CSharp
  lib/editor-common.generated
  lib/task/core
  lib/nbl/-
  new-names

signature 

  sorts
    
    Type

  constructors

    Type : ID -> Type

	  BoolType   : Type
	  IntType    : Type
	  StringType : Type
	  VoidType   : Type

rules // Type projections
  
  // Literals
  type-of:
    True() -> <type-of> BoolType()
    
  type-of:
    False() -> <type-of> BoolType()
      
  type-of:
    IntLit(_) -> <type-of> IntType()
    
  type-of:
    StrLit(_) -> <type-of> StringType()
  
  type-of:
    BoolType() -> <nabl-resolve> Type("Bool"{Use(URI(Language(<language>), [ID(Class(), "Bool", ())]))})
  
  type-of:
    IntType() -> <nabl-resolve> Type("Int"{Use(URI(Language(<language>), [ID(Class(), "Int", ())]))})
    
  type-of:
    StringType() -> <nabl-resolve> Type("String"{Use(URI(Language(<language>), [ID(Class(), "String", ())]))})
    
  type-of:
    VoidType() -> VoidType()
    
    
  // Modifiers  
  type-of:
    ArrayType(t) -> ArrayType(<type-of> t)
      
    
  // Definitions
  type-of:
    Class(x, _) -> x
    
  type-of:
    Class(x, _, _) -> x
  
  type-of:
    PartialClass(x, _) -> x
    
  type-of:
    PartialClass(x, _, _) -> x
  
  type-of:
    FieldDef(t, _) -> <type-of> t
  
  type-of:
    FunDef(t, _, _) -> <type-of> t
  
  type-of:
    FunDef(t, _, _, _) -> <type-of> t
  
  type-of:
    VarDef(t, _) -> <type-of> t
    
  type-of:
    VarDef(t, _, _) -> <type-of> t
    
  type-of:
    InferredVarDef(_, e) -> <type-of> e
    
  type-of:
    Param(t, _) -> <type-of> t
    
 
  // Type expressions
  type-of:
    TypeExp(t) -> <type-of> t
    
  type-of:
    TypePart(t) -> <nabl-resolve-collect-one; type-of> t

  type-of:
    TypePart(_, t) -> <nabl-resolve-collect-one; type-of> t    

  
  // Expressions
  type-of:
    Return(e) -> <type-of> e
  
  type-of:
    VarRef(f) -> <nabl-resolve-collect-one; type-of> f
  
  type-of:
    FieldAccess(e, f) -> <nabl-resolve-collect-one; type-of> f
    
  type-of:
    FunCall(e, m, _) -> <nabl-resolve-collect-one; type-of> m
    
  type-of:
    FunCall(m, _) -> <nabl-resolve-collect-one; type-of> m
    
  type-of:
    This() -> <nabl-resolve-collect-one; type-of> 
    
  type-of:
    Super() -> <nabl-resolve-collect-one; type-of> 

  type-of:
  	Add(_, _) -> <type-of> IntType()
  	
  type-of:
    Sub(_, _) -> <type-of> IntType()
    
  type-of:
    Mul(_, _) -> <type-of> IntType()
    
  type-of:
    Div(_, _) -> <type-of> IntType()


  // NBL
  type-of:
  	[_|_] -> <map(type-of)>
  	
  type-of:
    [] -> []
  	
  type-of:
    Def(uri) -> <nabl-get-property(|Type()); type-of> uri
    
  type-of:
    URI(_, _) -> <nabl-get-property(|Type()); type-of>
   
  type-of:
    Result(_) -> <nabl-resolve-results>
    
  type-of:
    Type(t@_{anno*}) -> <nabl-resolve-collect-one; type-of> t
    where
      not(<collect-one(?Def(_))> anno*)
    
  type-of:
    Type(t@_{anno*}) -> <id>
    where
      <collect-one(?Def(_))> anno*
      
rules // Comparison

  is-assignable-to:
    (to-type, from-type) -> to-type
    where
      <eq> (<type-of> from-type, <type-of> to-type)

rules // Utility
	
  print-type = 
    switch id
      case ?"String" : !"string"
      case ?"Int" : !"int"
      case ?VoidType() : !"void"
      case ?IntType() : !"int"
      case ?StringType() : !"string"
      case ?Type(t) : <print-type> t
      case ?[type|[]] : <print-type> type
      case ?[type|types]; not(<?[]> types) : !$[[<print-type> type], [<print-type> types]]
      case is-string : strip-annos
      case ?name#(_) : !$[[name]]
      otherwise : id
    end
