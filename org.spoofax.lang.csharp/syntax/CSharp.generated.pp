[
   Start                    -- _1,
   Start.1:iter-star        -- _1,
   Namespace                -- KW["namespace"] _1 KW["{"] _2 KW["}"],
   Namespace.2:iter-star    -- _1,
   PartialClass             -- KW["partial"] KW["class"] _1 KW["{"] _2 KW["}"],
   PartialClass.2:iter-star -- _1,
   PartialClass             -- KW["partial"] KW["class"] _1 KW[":"] _2 KW["{"] _3 KW["}"],
   PartialClass.3:iter-star -- _1,
   Class                    -- KW["class"] _1 KW["{"] _2 KW["}"],
   Class.2:iter-star        -- _1,
   Class                    -- KW["class"] _1 KW[":"] _2 KW["{"] _3 KW["}"],
   Class.3:iter-star        -- _1,
   Interface                -- KW["interface"] _1 KW["{"] _2 KW["}"],
   Interface.2:iter-star    -- _1,
   Interface                -- KW["interface"] _1 KW[":"] _2 KW["{"] _3 KW["}"],
   Interface.3:iter-star    -- _1,
   Using                    -- KW["using"] _1 KW[";"],
   UsingPart                -- _1,
   UsingPart                -- _1 KW["."] _2,
   FieldDef                 -- _1 _2 KW[";"],
   FunDef                   -- _1 _2 KW["("] _3 KW[")"] KW["{"] _4 KW["}"],
   FunDef.3:iter-star-sep   -- _1 KW[","],
   FunDef.4:iter-star       -- _1,
   FunDef                   -- _1 _2 KW["("] _3 KW[")"] KW[";"],
   FunDef.3:iter-star-sep   -- _1 KW[","],
   TypeExp                  -- _1,
   TypePart                 -- _1,
   TypePart                 -- _1 KW["."] _2,
   ArrayType                -- _1 KW["["] KW["]"],
   VoidType                 -- KW["void"],
   FunCall                  -- _1 KW["("] _2 KW[")"],
   FunCall.2:iter-star-sep  -- _1 KW[","],
   FunCall                  -- _1 KW["."] _2 KW["("] _3 KW[")"],
   FunCall.3:iter-star-sep  -- _1 KW[","],
   FieldAccess              -- _1 KW["."] _2,
   Return                   -- KW["return"] _1 KW[";"],
   VarDef                   -- _1 _2 KW[";"],
   VarDef                   -- _1 _2 KW["="] _3 KW[";"],
   InferredVarDef           -- KW["var"] _1 KW["="] _2 KW[";"],
   Assign                   -- _1 KW["="] _2 KW[";"],
   If                       -- KW["if"] KW["("] _1 KW[")"] _2,
   IfElse                   -- KW["if"] KW["("] _1 KW[")"] _2 KW["else"] _3,
   For                      -- KW["for"] KW["("] _1 _2 KW["="] _3 KW[";"] _4 KW[";"] _5 KW[")"] _6,
   ForEach                  -- KW["foreach"] KW["("] _1 _2 KW["in"] _3 KW[")"] _4,
   Block                    -- V  [V vs=2 [KW["{"] _1] KW["}"]],
   Block.1:iter-star        -- _1,
   True                     -- KW["true"],
   False                    -- KW["false"],
   IntLit                   -- _1,
   StrLit                   -- _1,
   VarRef                   -- _1,
   This                     -- KW["this"],
   Super                    -- KW["super"],
   Add                      -- _1 KW["+"] _2,
   Sub                      -- _1 KW["-"] _2,
   Mul                      -- _1 KW["*"] _2,
   Div                      -- _1 KW["/"] _2,
   Eq                       -- _1 KW["=="] _2,
   Lt                       -- _1 KW["<"] _2,
   Lte                      -- _1 KW["<="] _2,
   Gt                       -- _1 KW[">"] _2,
   Gte                      -- _1 KW[">="] _2,
   Param                    -- _1 _2
]